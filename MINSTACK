import java.util.Stack;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        SpecialStack specialStack = new SpecialStack();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Top");
            System.out.println("4. Get Min");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter element to push: ");
                    int element = scanner.nextInt();
                    specialStack.push(element);
                    break;
                case 2:
                    int popped = specialStack.pop();
                    if (popped == -1) {
                        System.out.println("Stack is empty.");
                    } else {
                        System.out.println("Popped element: " + popped);
                    }
                    break;
                case 3:
                    int top = specialStack.top();
                    if (top == -1) {
                        System.out.println("Stack is empty.");
                    } else {
                        System.out.println("Top element: " + top);
                    }
                    break;
                case 4:
                    int min = specialStack.getMin();
                    if (min == -1) {
                        System.out.println("Stack is empty.");
                    } else {
                        System.out.println("Minimum element: " + min);
                    }
                    break;
                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }
}


 class SpecialStack {
    // Define the data members.
    private Stack<Integer> s;
    private int mini;

    /*----------------- Public Functions of SpecialStack -----------------*/
    public SpecialStack() {
        s = new Stack<>();
        mini = Integer.MAX_VALUE;
    }

    public void push(int data) {
        // for first element
        if (s.isEmpty()) {
            s.push(data);
            mini = data;
        } else {
            if (data < mini) {
                s.push(2 * data - mini);
                mini = data;
            } else {
                s.push(data);
            }
        }
    }

    public int pop() {
        if (s.isEmpty()) {
            return -1;
        }

        int curr = s.pop();
        if (curr > mini) {
            return curr;
        } else {
            int prevMin = mini;
            int val = 2 * mini - curr;
            mini = val;
            return prevMin;
        }
    }

    public int top() {
        if (s.isEmpty())
            return -1;

        int curr = s.peek();
        if (curr < mini) {
            return mini;
        } else {
            return curr;
        }
    }

    public boolean isEmpty() {
        return s.isEmpty();
    }

    public int getMin() {
        if (s.isEmpty())
            return -1;

        return mini;
    }
}
